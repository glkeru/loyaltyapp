// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glkeru/loyalty/engine/internal/interfaces (interfaces: RuleStorage)
//
// Generated by this command:
//
//	mockgen -destination=./../services/mock_engine_test.go -package=engine . RuleStorage
//

// Package engine is a generated GoMock package.
package engine

import (
	context "context"
	reflect "reflect"

	engine "github.com/glkeru/loyalty/engine/internal/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRuleStorage is a mock of RuleStorage interface.
type MockRuleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRuleStorageMockRecorder
	isgomock struct{}
}

// MockRuleStorageMockRecorder is the mock recorder for MockRuleStorage.
type MockRuleStorageMockRecorder struct {
	mock *MockRuleStorage
}

// NewMockRuleStorage creates a new mock instance.
func NewMockRuleStorage(ctrl *gomock.Controller) *MockRuleStorage {
	mock := &MockRuleStorage{ctrl: ctrl}
	mock.recorder = &MockRuleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleStorage) EXPECT() *MockRuleStorageMockRecorder {
	return m.recorder
}

// GetActiveRules mocks base method.
func (m *MockRuleStorage) GetActiveRules(ctx context.Context) ([]engine.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRules", ctx)
	ret0, _ := ret[0].([]engine.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRules indicates an expected call of GetActiveRules.
func (mr *MockRuleStorageMockRecorder) GetActiveRules(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRules", reflect.TypeOf((*MockRuleStorage)(nil).GetActiveRules), ctx)
}

// GetAllRules mocks base method.
func (m *MockRuleStorage) GetAllRules(ctx context.Context) ([]engine.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRules", ctx)
	ret0, _ := ret[0].([]engine.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRules indicates an expected call of GetAllRules.
func (mr *MockRuleStorageMockRecorder) GetAllRules(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRules", reflect.TypeOf((*MockRuleStorage)(nil).GetAllRules), ctx)
}

// GetRule mocks base method.
func (m *MockRuleStorage) GetRule(ctx context.Context, ruleId uuid.UUID) engine.Rule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", ctx, ruleId)
	ret0, _ := ret[0].(engine.Rule)
	return ret0
}

// GetRule indicates an expected call of GetRule.
func (mr *MockRuleStorageMockRecorder) GetRule(ctx, ruleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockRuleStorage)(nil).GetRule), ctx, ruleId)
}

// SaveRule mocks base method.
func (m *MockRuleStorage) SaveRule(ctx context.Context, rule engine.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRule", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRule indicates an expected call of SaveRule.
func (mr *MockRuleStorageMockRecorder) SaveRule(ctx, rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRule", reflect.TypeOf((*MockRuleStorage)(nil).SaveRule), ctx, rule)
}
