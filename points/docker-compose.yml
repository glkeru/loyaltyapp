services:
  points:
    build: .
    container_name: points
    ports:
      - "${POINTS_GRPC_PORT}:50051"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["./points"]
    
  commit_points:
    build: .
    container_name: commit_points
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command: ["./commit_points"]
  
  orders:
    build: .
    container_name: orders
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"      
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy        
    command: ["./orders"]

  returns:
    build: .
    container_name: returns
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy        
    command: ["./returns"]


  redeems:
    build: .
    container_name: redeems
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbit:
        condition: service_healthy        
    command: ["./redeems"]

  postgres:
    image: postgres:16
    container_name: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data/
    env_file:
      - .env      
    environment:
      POSTGRES_USER: ${POINTS_DB_USER}
      POSTGRES_PASSWORD: ${POINTS_DB_PASSWORD}
      POSTGRES_DB: ${POINTS_DB_BASE}
    ports:
      - '${POINTS_DB_PORT}:5432'
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U login
       -d ${POINTS_DB_BASE}"] 
      interval: 2s 
      timeout: 2s 
      retries: 30      


  migrate:
    image: ghcr.io/kukymbr/goose-docker:3.24.3
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: "postgres://${POINTS_DB_USER}:${POINTS_DB_PASSWORD}@postgres:${POINTS_DB_PORT}/${POINTS_DB_BASE}?sslmode=disable"
      GOOSE_MIGRATION_DIR: /migrations
      GOOSE_COMMAND: up             
    volumes:
      - ./internal/db/migrations:/migrations:ro
    restart: "no"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    env_file:
      - .env    
    ports:
      - "${KAFKA_ORDER_PORT}:9092"       
    environment:
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server ${KAFKA_ORDER_URL}:${KAFKA_ORDER_PORT} --list >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  topic-init:
    image: bitnami/kafka:latest
    env_file:
      - .env       
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash","-lc"]
    command: >
      kafka-topics.sh --bootstrap-server kafka:${KAFKA_ORDER_PORT} --create --if-not-exists --topic orders  --partitions 1 --replication-factor 1 &&
      kafka-topics.sh --bootstrap-server kafka:${KAFKA_ORDER_PORT} --create --if-not-exists --topic returns --partitions 1 --replication-factor 1
    restart: "no"

  # Kafka UI http://localhost:8081
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    env_file:
      - .env   
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:${KAFKA_ORDER_PORT}"


  redis:
    image: redis:alpine
    env_file:
      - .env  
    ports:
      - '${POINTS_CACHE_PORT}:6379'

  # Redis UI http://localhost:8011
  redis-ui:
    image: rediscommander/redis-commander:latest
    env_file:
      - .env  
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${POINTS_CACHE_PORT_UI}:8081"
    depends_on:
      - redis      

  rabbit:
    image: rabbitmq:3.13-management-alpine   
    container_name: rabbitmq
    env_file:
      - .env      
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: points
    ports:
      - "${RABBIT_PORT}:5672"         
      - "${RABBIT_PORT_UI}:15672"     
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  pgdata:        
