// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/api/grpc/points.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GetPoints_GetBalance_FullMethodName = "/points.GetPoints/GetBalance"
	GetPoints_GetTnx_FullMethodName     = "/points.GetPoints/GetTnx"
)

// GetPointsClient is the client API for GetPoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// сервис: получение баланса, получение транзакций
type GetPointsClient interface {
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetTnx(ctx context.Context, in *TnxRequest, opts ...grpc.CallOption) (*TnxResponse, error)
}

type getPointsClient struct {
	cc grpc.ClientConnInterface
}

func NewGetPointsClient(cc grpc.ClientConnInterface) GetPointsClient {
	return &getPointsClient{cc}
}

func (c *getPointsClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, GetPoints_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getPointsClient) GetTnx(ctx context.Context, in *TnxRequest, opts ...grpc.CallOption) (*TnxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TnxResponse)
	err := c.cc.Invoke(ctx, GetPoints_GetTnx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetPointsServer is the server API for GetPoints service.
// All implementations must embed UnimplementedGetPointsServer
// for forward compatibility.
//
// сервис: получение баланса, получение транзакций
type GetPointsServer interface {
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	GetTnx(context.Context, *TnxRequest) (*TnxResponse, error)
	mustEmbedUnimplementedGetPointsServer()
}

// UnimplementedGetPointsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetPointsServer struct{}

func (UnimplementedGetPointsServer) GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedGetPointsServer) GetTnx(context.Context, *TnxRequest) (*TnxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTnx not implemented")
}
func (UnimplementedGetPointsServer) mustEmbedUnimplementedGetPointsServer() {}
func (UnimplementedGetPointsServer) testEmbeddedByValue()                   {}

// UnsafeGetPointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetPointsServer will
// result in compilation errors.
type UnsafeGetPointsServer interface {
	mustEmbedUnimplementedGetPointsServer()
}

func RegisterGetPointsServer(s grpc.ServiceRegistrar, srv GetPointsServer) {
	// If the following call pancis, it indicates UnimplementedGetPointsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetPoints_ServiceDesc, srv)
}

func _GetPoints_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetPointsServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetPoints_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetPointsServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetPoints_GetTnx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TnxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetPointsServer).GetTnx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetPoints_GetTnx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetPointsServer).GetTnx(ctx, req.(*TnxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetPoints_ServiceDesc is the grpc.ServiceDesc for GetPoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetPoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "points.GetPoints",
	HandlerType: (*GetPointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _GetPoints_GetBalance_Handler,
		},
		{
			MethodName: "GetTnx",
			Handler:    _GetPoints_GetTnx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/grpc/points.proto",
}
